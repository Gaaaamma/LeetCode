=================================================================
Quick Sort: std::sort(begin, end, functor) 
#incldue <algorithm>
Ascending order: default
Descending order: std::greater<Type>() #include <functional>
Ref: https://shengyu7697.github.io/std-sort/

=================================================================
Binary Search: std::binary_search(begin, end, target)
#include <algorithm>

=================================================================
Data structure: std::unordered_set
#include <unordered_set>

unordered_set::find(key) = O(1)
  find = unordered_set::iterator (iterator to that element)
  No find = unordered_set::end() (It is iterator too)

unordered_set::insert(key) = O(1)

=================================================================
Data structure: std::multimap
#include <map>

unordered_set::find(key) = O(1)
  find = unordered_set::iterator (iterator to that element)
  No find = unordered_set::end() (It is iterator too)

unordered_set::insert(key) = O(1)

=================================================================
Char to string:

1. single char to string = string(size_t n, char c) 
=>  Make a string which consists of n times of c

2. char[] to string = string(char*) OR string(addr, addr + length) 

=================================================================
String to int:
stoi(string)

=================================================================
int to string:
to_string(int)

=================================================================
sub string:
substr(int start, size_t length);
