=================================================================
Vector:
#include <vector>

vector::push_back(element)
  push and element to back of vector

vector::pop_back()
  remove the last element in vector

vector::back()
  get last element from vector

vector::erase(index)
  remove the element at index

vector::insert(position, ...)
  insert something at position of vector
  iterator from another vector is legal too
  Ex: vec.insert(vec.end(), src.begin(), src.end())


=================================================================
Quick Sort: std::sort(begin, end, functor) 
#incldue <algorithm>
Ascending order: default
Descending order: std::greater<Type>() #include <functional>
Ref: https://shengyu7697.github.io/std-sort/

=================================================================
Binary Search: std::binary_search(begin, end, target)
#include <algorithm>

=================================================================
Data structure: std::unordered_set
#include <unordered_set>

unordered_set::find(key) = O(1)
  find = unordered_set::iterator (iterator to that element)
  No find = unordered_set::end() (It is iterator too)

unordered_set::insert(key) = O(1)

=================================================================
Data structure: std::multimap
#include <map>

unordered_set::find(key) = O(1)
  find = unordered_set::iterator (iterator to that element)
  No find = unordered_set::end() (It is iterator too)

unordered_set::insert(key) = O(1)
=================================================================
Data structure: std::stack
#include <stack>

val stack::top() = O(1)
  return the element from top
void stack::pop() = O(1)
  pop the element from top
void stack::push(val) = O(1)
  push the element in the stack at top

=================================================================
Data structure: std::queue
#include <queue>

val stack::front() = O(1)
  return the first element
void stack::pop() = O(1)
  pop the element from front
void stack::push(val) = O(1)
  push the element in the queue at back

=================================================================
String:

# Char to string:
1. single char to string = string(size_t n, char c) 
=>  Make a string which consists of n times of c

2. char[] to string = string(char*) OR string(addr, addr + length) 

# String to int:
stoi(string)

# int to string:
to_string(int)

# substring:
str.substr(int start, size_t length);

# reverse:
reverse(begin, end);

# find:
str.find - index
         - string::npos
    